(in-package :yggdrasil)

(defparameter *images* (make-array 0 :adjustable t :fill-pointer 0))
(defparameter *auto-draw-vector* (make-array 0 :adjustable t :fill-pointer 0))

(defun find-image (image-name)
  (doarray (image *images*)
    (when (string-equal (slot-value image 'image-name) image-name)
      (return-from find-image image))))

(defclass image (rectangle)
  ((image-name :initarg :name)
   (auto-draw :initarg :auto-draw)
   (image-data :initarg :image)))

(defun load-image-to-vector (image-name filename &key (x 0) (y 0) auto-draw (path *asset-path*) color-key color-key-at (alpha #xFF))
  (vector-push-extend (load-image filename :path path :x x :y y :color-key color-key :color-key-at color-key-at :alpha alpha :image-name image-name :auto-draw auto-draw) *images*))

(defun remove-from-auto-draw (image-name))

(defun load-image (filename &key (path *asset-path*) (x 0) (y 0) color-key color-key-at (alpha #xFF) (image-name filename) auto-draw)
  (let* ((arguments `(,(merge-pathnames filename path)
		    ,@(when color-key (list :color-key color-key))
		    ,@(when color-key-at (list :color-key-at color-key-at))
		     :alpha ,alpha))
	 (surface (apply #'sdl:load-and-convert-image arguments))
	 (image (make-instance 'image :name image-name :auto-draw auto-draw :image surface :w (sdl:width surface) :h (sdl:height surface) :x x :y y)))

    (when auto-draw
      (vector-push-extend image *auto-draw-vector*))
    image))


(defun draw-image-from-vector (image-name &key x y)
  (draw-image (find-image image-name) :x x :y y))

;; Reduntant in SDL, not reduntant with OpenGL
(defun draw-image (image &key (x (slot-value image 'x)) (y (slot-value image 'y)))
  (format t "image - ~a~%" image)
  (sdl:draw-surface-at-* (slot-value image 'image-data) x y))
